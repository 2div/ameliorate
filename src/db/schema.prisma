generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // DATABASE_URL will use pooling for deployed environments, so we need to set a DIRECT_URL as well.
  // I guess serverless functions will otherwise result in many connections
  // Prisma docs: https://www.prisma.io/docs/guides/performance-and-optimization/connection-management/configure-pg-bouncer
  // Neon docs: https://neon.tech/docs/guides/prisma
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(39) // uses collation to ensure comparisons are case insensitive, not yet supported by prisma schema https://github.com/prisma/prisma/issues/16781
  authId    String   @unique @db.VarChar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics Topic[]
  scores UserScore[]

  @@index([username])
  @@index([authId])
  @@map("users")
}

model Topic {
  id                Int            @id @default(autoincrement())
  title             String         @db.VarChar(100) // uses collation to ensure comparisons are case insensitive, not yet supported by prisma schema https://github.com/prisma/prisma/issues/16781
  creatorName       String // uses collation to ensure comparisons are case insensitive, not yet supported by prisma schema https://github.com/prisma/prisma/issues/16781
  description       String         @default("") @db.VarChar(10000) // arbitrarily large max length
  visibility        VisibilityType @default(public)
  allowAnyoneToEdit Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  creator    User        @relation(fields: [creatorName], references: [username], onDelete: Cascade)
  nodes      Node[]
  edges      Edge[]
  userScores UserScore[]

  @@unique([title, creatorName])
  @@index([creatorName])
  @@map("topics")
}

enum VisibilityType {
  public
  unlisted
  private
}

model Node {
  id                  String   @id @db.Uuid // apparently cuid2 https://github.com/paralleldrive/cuid2 is a newer similar thing but I think it's intentionally slow alg for security reasons, doesn't seem necessary
  topicId             Int
  arguedDiagramPartId String?  @db.Uuid // only set if this is a claim node; ideally this would be FK but could point to either Node or Edge
  type                NodeType
  customType          String?  @db.VarChar(30) // arbitrary max, "Solution Component" is 18 chars
  text                String   @db.VarChar(200) // arbitrary max, ~50 chars fit on 3 lines of the node's text area
  notes               String   @default("") @db.VarChar(10000) // arbitrarily large max length
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@map("nodes")
}

enum NodeType {
  // topic
  problem
  cause
  criterion
  effect
  benefit
  detriment
  solutionComponent
  solution
  obstacle

  // research
  question
  answer
  fact
  source

  // claim
  rootClaim
  support
  critique

  // generic, for unrestricted editing
  custom
}

model Edge {
  id                  String   @id @db.Uuid
  topicId             Int
  arguedDiagramPartId String?  @db.Uuid // only set if this is a claim node; ideally this would be FK but could point to either Node or Edge
  type                EdgeType
  customLabel         String?  @db.VarChar(30) // arbitrary max, "Potential Answer To" is 19 chars
  notes               String   @default("") @db.VarChar(10000) // arbitrarily large max length
  sourceId            String   @db.Uuid
  targetId            String   @db.Uuid
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  // when prisma allows weak FKs https://github.com/prisma/prisma/issues/7351, relation to source & target node/edge could be added here

  @@index([topicId])
  @@index([sourceId])
  @@index([targetId])
  @@map("edges")
}

enum EdgeType {
  // topic
  causes
  subproblemOf
  addresses
  accomplishes
  createdBy
  has
  criterionFor
  creates
  embodies
  obstacleOf

  // research
  asksAbout
  potentialAnswerTo
  relevantFor
  sourceOf
  mentions

  // claim
  supports
  critiques

  // generic, for unrestricted editing
  relatesTo
}

model UserScore {
  username    String // uses collation to ensure comparisons are case insensitive, not yet supported by prisma schema https://github.com/prisma/prisma/issues/16781
  graphPartId String   @db.Uuid
  topicId     Int // mainly so that we can cascade (since graphPart isn't a FK to cascade from that)
  value       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User  @relation(fields: [username], references: [username], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  // when prisma allows weak FKs https://github.com/prisma/prisma/issues/7351, relation to node & to edge could be added here

  @@id([username, graphPartId])
  @@index([username])
  @@index([graphPartId])
  @@index([topicId])
  @@map("userScores")
}
